from seleniumbase import Driver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import time
import re
import os
from datetime import datetime
import gspread
from google.oauth2 import service_account

class GoogleSheetsParser:
    def __init__(self):
        self.driver = None
        self.google_sheet_id = "1Xd4kikdV3FT8EtGYZOpCONfzs08gp86q8xEBE5OXbkY"
        self.worksheet = None
        self.last_page_file = r"C:\Users\Vasiliy\Desktop\–ü–∞—Ä—Å–µ—Ä_–ª–∏—Ü–µ–Ω–∑–∏–π\last_page_gsheets.txt"
        self.dental_count = 0
        self.processed_count = 0
        self.skipped_count = 0
        self.duplicates_count = 0
        
        # –ü—É—Ç—å –∫ –≤–∞—à–µ–º—É JSON —Ñ–∞–π–ª—É —Å credentials
        self.credentials_file = r"C:\Users\Vasiliy\Desktop\–ü–∞—Ä—Å–µ—Ä_–ª–∏—Ü–µ–Ω–∑–∏–π\stomatologyscraper-7f64e5b6d7b7.json"
        
        # URL —Å –Ω—É–∂–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ - –ü–†–ê–í–ò–õ–¨–ù–´–ô URL!
        self.target_url = "https://license.gov.uz/registry?filter%5Bdocument_id%5D=2908&filter%5Bdocument_type%5D=LICENSE"
        
        # –ö—ç—à —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        self.existing_records = set()
    
    def setup_google_sheets(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets"""
        print("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞
            if not os.path.exists(self.credentials_file):
                print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.credentials_file}")
                raise Exception("–§–∞–π–ª credentials –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            print(f"‚úì –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª credentials: {os.path.basename(self.credentials_file)}")
            
            # –°–æ–∑–¥–∞–µ–º credentials –∏–∑ JSON —Ñ–∞–π–ª–∞
            credentials = service_account.Credentials.from_service_account_file(
                self.credentials_file,
                scopes=['https://www.googleapis.com/auth/spreadsheets',
                        'https://www.googleapis.com/auth/drive']
            )
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Google Sheets
            gc = gspread.authorize(credentials)
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            spreadsheet = gc.open_by_key(self.google_sheet_id)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç
            self.worksheet = spreadsheet.get_worksheet(0)
            
            print(f"‚úì –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Google Sheets")
            print(f"  –¢–∞–±–ª–∏—Ü–∞: {spreadsheet.title}")
            print(f"  –õ–∏—Å—Ç: {self.worksheet.title}")
            print(f"  –°—Å—ã–ª–∫–∞: https://docs.google.com/spreadsheets/d/{self.google_sheet_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            headers = self.worksheet.row_values(1)
            if not headers or 'RegNumber_label' not in headers:
                # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç –∏–ª–∏ –æ–Ω–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ
                new_headers = [
                    'RegNumber_label',
                    '–î–∞—Ç–∞',
                    '–ò–ù–ù',
                    '–§–ª–∞–≥ –°–µ—Ç–∏',
                    '–ù–∞–∑–≤–∞–Ω–∏–µ',
                    '–°—Ç–∞—Ç—É—Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏',
                    '–ê–¥—Ä–µ—Å',
                    '–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ –ª–∏—Ü–µ–Ω–∑–∏–∏',
                    '–í–∏–¥–î–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏'
                ]
                self.worksheet.update('A1:I1', [new_headers])
                print("  ‚úì –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å–æ–∑–¥–∞–Ω—ã/–æ–±–Ω–æ–≤–ª–µ–Ω—ã")
            else:
                print(f"  ‚úì –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            self.load_existing_records()
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets: {str(e)}")
            raise
    
    def load_existing_records(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"""
        try:
            print("  –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤...")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
            all_values = self.worksheet.get_all_values()
            
            if len(all_values) <= 1:  # –¢–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏–ª–∏ –ø—É—Å—Ç–∞—è —Ç–∞–±–ª–∏—Ü–∞
                print("  ‚úì –¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏")
                return
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É (–∑–∞–≥–æ–ª–æ–≤–∫–∏)
            for row in all_values[1:]:
                if len(row) >= 3:  # –ú–∏–Ω–∏–º—É–º –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 3 –∫–æ–ª–æ–Ω–∫–∏
                    license_num = str(row[0]).strip()  # RegNumber_label - –ø–µ—Ä–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞
                    inn = str(row[2]).strip()  # –ò–ù–ù - —Ç—Ä–µ—Ç—å—è –∫–æ–ª–æ–Ω–∫–∞
                    
                    if inn and license_num and inn != '' and license_num != '':
                        unique_key = f"{inn}_{license_num}"
                        self.existing_records.add(unique_key)
                        
            print(f"  ‚úì –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.existing_records)} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            if self.existing_records:
                sample_keys = list(self.existing_records)[:3]
                print(f"  –ü—Ä–∏–º–µ—Ä—ã –∫–ª—é—á–µ–π: {sample_keys}")
            
        except Exception as e:
            print(f"  ‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏: {str(e)}")
            print("  –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")
    
    def check_duplicate(self, inn, license_num):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç –∑–∞–ø–∏—Å–∏"""
        if not inn or not license_num:
            return False
            
        unique_key = f"{inn}_{license_num}"
        is_duplicate = unique_key in self.existing_records
        
        if is_duplicate:
            print(f"    üîç –ü—Ä–æ–≤–µ—Ä–∫–∞: –ò–ù–ù={inn}, –õ–∏—Ü–µ–Ω–∑–∏—è={license_num} - –î–£–ë–õ–ò–ö–ê–¢")
        else:
            print(f"    üîç –ü—Ä–æ–≤–µ—Ä–∫–∞: –ò–ù–ù={inn}, –õ–∏—Ü–µ–Ω–∑–∏—è={license_num} - –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å")
            
        return is_duplicate
    
    def setup_driver(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞"""
        print("–ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞...")
        
        self.driver = Driver(
            browser="chrome",
            uc=True,
            headless=False,
            locale_code="ru"
        )
        
        print("‚úì –ë—Ä–∞—É–∑–µ—Ä –∑–∞–ø—É—â–µ–Ω")
    
    def get_last_processed_page(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–º–µ—Ä –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        try:
            if os.path.exists(self.last_page_file):
                with open(self.last_page_file, 'r') as f:
                    return int(f.read().strip())
        except:
            pass
        return 0
    
    def save_last_processed_page(self, page_num):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–º–µ—Ä –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        try:
            os.makedirs(os.path.dirname(self.last_page_file), exist_ok=True)
            with open(self.last_page_file, 'w') as f:
                f.write(str(page_num))
        except:
            pass
    
    def add_to_google_sheets(self, record):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            inn = str(record.get('–ò–ù–ù', '')).strip()
            license_num = str(record.get('–ù–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞', '')).strip()
            
            # –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç
            if inn and license_num:
                if self.check_duplicate(inn, license_num):
                    self.duplicates_count += 1
                    return False  # –î—É–±–ª–∏–∫–∞—Ç - –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π —Ç–∞–±–ª–∏—Ü—ã
            row_data = [
                license_num,                                # RegNumber_label
                record.get('–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏', ''),             # –î–∞—Ç–∞
                inn,                                        # –ò–ù–ù
                '',                                         # –§–ª–∞–≥ –°–µ—Ç–∏ (–ø—É—Å—Ç–æ–µ)
                record.get('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ª–∏—Ü–µ–Ω–∑–∏–∞—Ç–∞', '').replace('"', '').strip(), # –ù–∞–∑–≤–∞–Ω–∏–µ
                record.get('–°—Ç–∞—Ç—É—Å', '–ê–∫—Ç–∏–≤–Ω—ã–π'),          # –°—Ç–∞—Ç—É—Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
                record.get('–ê–¥—Ä–µ—Å –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏', ''),      # –ê–¥—Ä–µ—Å
                record.get('–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏', ''),           # –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ –ª–∏—Ü–µ–Ω–∑–∏–∏
                ''                                          # –í–∏–¥–î–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–ø—É—Å—Ç–æ–µ)
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Ç–∞–±–ª–∏—Ü—É
            self.worksheet.append_row(row_data, value_input_option='USER_ENTERED')
            
            # –í–ê–ñ–ù–û: –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫—ç—à —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            if inn and license_num:
                unique_key = f"{inn}_{license_num}"
                self.existing_records.add(unique_key)
                print(f"    ‚úÖ –ù–û–í–ê–Ø –∑–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Google Sheets")
            
            self.dental_count += 1
            print(f"    üìä –í—Å–µ–≥–æ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ: {self.dental_count}")
            return True
            
        except Exception as e:
            print(f"    ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)[:100]}")
            
            # –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–Ω–æ–≤–∞
            try:
                time.sleep(2)
                print("    –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Google Sheets...")
                self.setup_google_sheets()
                
                # –ü–æ—Å–ª–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–±—É–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–Ω–æ–≤–∞
                self.worksheet.append_row(row_data, value_input_option='USER_ENTERED')
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫—ç—à
                if inn and license_num:
                    unique_key = f"{inn}_{license_num}"
                    self.existing_records.add(unique_key)
                
                self.dental_count += 1
                print(f"    ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
                return True
            except:
                print(f"    ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–∂–µ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
                return False
    
    def select_russian_language(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞"""
        try:
            print("–í—ã–±–∏—Ä–∞–µ–º —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫...")
            
            # –ò—â–µ–º –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —è–∑—ã–∫–∞
            language_selectors = [
                '//div[contains(@class, "LanguageSwitcher")]//div[text()="–†–£"]',
                '//div[contains(@class, "LanguageSwitcher")]//div[contains(text(), "–†–£")]',
                '//button[text()="–†–£"]',
                '//a[text()="–†–£"]',
                '//*[contains(@class, "language")]//span[text()="–†–£"]',
                '//*[contains(@class, "lang")]//span[text()="–†–£"]'
            ]
            
            for selector in language_selectors:
                try:
                    lang_button = self.driver.find_element(By.XPATH, selector)
                    if lang_button.is_displayed():
                        lang_button.click()
                        print("‚úì –†—É—Å—Å–∫–∏–π —è–∑—ã–∫ –≤—ã–±—Ä–∞–Ω")
                        time.sleep(2)
                        return True
                except:
                    continue
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∫–Ω–æ–ø–∫—É –†–£, –∏—â–µ–º –∫–Ω–æ–ø–∫—É —Å —Ñ–ª–∞–≥–æ–º
            try:
                flag_button = self.driver.find_element(By.CSS_SELECTOR, '[class*="flag-ru"], [class*="russia"]')
                flag_button.click()
                print("‚úì –†—É—Å—Å–∫–∏–π —è–∑—ã–∫ –≤—ã–±—Ä–∞–Ω —á–µ—Ä–µ–∑ —Ñ–ª–∞–≥")
                time.sleep(2)
                return True
            except:
                pass
            
            print("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —è–∑—ã–∫–∞")
            return False
            
        except Exception as e:
            print(f"‚ö† –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞: {str(e)[:50]}")
            return False
    
    def wait_for_table_and_navigate(self, target_page):
        """–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –∏ –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –Ω—É–∂–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É"""
        print("–û–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏...")
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –≤—ã–±—Ä–∞—Ç—å —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
        self.select_russian_language()
        
        # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
        max_wait = 180  # 3 –º–∏–Ω—É—Ç—ã –º–∞–∫—Å–∏–º—É–º
        start_time = time.time()
        
        while time.time() - start_time < max_wait:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü—ã
                rows = self.driver.find_elements(By.CSS_SELECTOR, 'tr.Table_row__329lz, tr[class*="Table_row"]')
                if not rows:
                    rows = self.driver.find_elements(By.CSS_SELECTOR, 'tbody tr')
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏
                data_rows = [row for row in rows if row.text and ('–ú–µ–¥–∏—Ü–∏–Ω–∞' in row.text or '–õ–∏—Ü–µ–Ω–∑–∏—è' in row.text)]
                
                if len(data_rows) > 0:
                    print(f"‚úì –¢–∞–±–ª–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –Ω–∞–π–¥–µ–Ω–æ {len(data_rows)} –∑–∞–ø–∏—Å–µ–π")
                    
                    # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –¥—Ä—É–≥—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                    if target_page > 1:
                        print(f"–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É {target_page}...")
                        
                        # –ò—â–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
                        for page in range(2, target_page + 1):
                            success = self.go_to_page_number(page)
                            if not success:
                                print(f"‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É {page}")
                                return False
                            time.sleep(3)  # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                        
                        print(f"‚úì –ü–µ—Ä–µ—à–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É {target_page}")
                    
                    return True
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                elapsed = int(time.time() - start_time)
                if elapsed % 10 == 0 and elapsed > 0:
                    print(f"  –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏... {elapsed} —Å–µ–∫")
                
                time.sleep(2)
                
            except Exception as e:
                print(f"  –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏: {str(e)[:50]}")
                time.sleep(2)
        
        print("‚ö† –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã")
        return False
    
    def go_to_page_number(self, page_number):
        """–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ –Ω–æ–º–µ—Ä—É"""
        try:
            # –ò—â–µ–º –∫–Ω–æ–ø–∫—É —Å –Ω–æ–º–µ—Ä–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            page_selectors = [
                f'//button[text()="{page_number}"]',
                f'//a[text()="{page_number}"]',
                f'//button[contains(@class, "pagination") and text()="{page_number}"]',
                f'//a[contains(@class, "pagination") and text()="{page_number}"]'
            ]
            
            for selector in page_selectors:
                try:
                    page_button = self.driver.find_element(By.XPATH, selector)
                    if page_button.is_displayed() and page_button.is_enabled():
                        self.driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", page_button)
                        time.sleep(1)
                        
                        try:
                            page_button.click()
                        except:
                            self.driver.execute_script("arguments[0].click();", page_button)
                        
                        return True
                except:
                    continue
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø—Ä—è–º—É—é –∫–Ω–æ–ø–∫—É, –ø—Ä–æ–±—É–µ–º –∫–Ω–æ–ø–∫—É "–î–∞–ª–µ–µ"
            return self.click_next_button()
            
        except Exception as e:
            print(f"  –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É {page_number}: {str(e)[:50]}")
            return False
    
    def click_next_button(self):
        """–ö–ª–∏–∫ –Ω–∞ –∫–Ω–æ–ø–∫—É '–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞'"""
        try:
            next_selectors = [
                '//button[contains(text(), "‚Üí")]',
                '//button[contains(text(), ">")]',
                '//a[contains(text(), "‚Üí")]',
                '//a[contains(text(), ">")]',
                '[aria-label="Next"]',
                '[aria-label="next"]',
                '.pagination-next',
                '[class*="pagination"] button:last-child'
            ]
            
            for selector in next_selectors:
                try:
                    if selector.startswith('//'):
                        next_btn = self.driver.find_element(By.XPATH, selector)
                    else:
                        next_btn = self.driver.find_element(By.CSS_SELECTOR, selector)
                    
                    if next_btn.is_displayed() and next_btn.is_enabled():
                        self.driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", next_btn)
                        time.sleep(1)
                        
                        try:
                            next_btn.click()
                        except:
                            self.driver.execute_script("arguments[0].click();", next_btn)
                        
                        return True
                except:
                    continue
            
            return False
            
        except:
            return False
    
    def close_modal_window(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞"""
        close_selectors = [
            '[class*="close"]',
            '[aria-label="close"]',
            '[aria-label="Close"]',
            'button[class*="close"]',
            'svg[class*="close"]',
            '[class*="modal"] button',
            '[role="dialog"] button'
        ]
        
        for selector in close_selectors:
            try:
                close_buttons = self.driver.find_elements(By.CSS_SELECTOR, selector)
                for btn in close_buttons:
                    if btn.is_displayed() and btn.is_enabled():
                        btn_text = btn.text.strip().lower()
                        aria_label = btn.get_attribute('aria-label') or ''
                        
                        if (not btn_text or 
                            btn_text in ['x', '√ó', '–∑–∞–∫—Ä—ã—Ç—å', 'close'] or
                            'close' in aria_label.lower()):
                            
                            btn.click()
                            time.sleep(0.5)
                            return True
            except:
                continue
        
        return False
    
    def extract_specializations(self, modal):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π –∏–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞"""
        specializations = []
        
        try:
            # –ü–æ–∏—Å–∫ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π –ø–æ CSS —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º
            spec_selectors = [
                '.List_itemDescription_30s1n',
                '[class*="List_itemDescription"]',
                '.List_item_2GXxQ .List_itemDescription_30s1n',
                '[class*="List_item"] [class*="itemDescription"]',
            ]
            
            for selector in spec_selectors:
                try:
                    spec_elements = modal.find_elements(By.CSS_SELECTOR, selector)
                    if spec_elements:
                        for elem in spec_elements:
                            text = elem.text.strip()
                            if text and len(text) > 5:
                                specializations.append(text)
                        if specializations:
                            break
                except:
                    continue
            
            # –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –∑–∞–≥–æ–ª–æ–≤–æ–∫ "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"
            if not specializations:
                try:
                    spec_headers = modal.find_elements(By.XPATH, "//*[contains(text(), '–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏')]")
                    
                    for header in spec_headers:
                        parent = header.find_element(By.XPATH, "../..")
                        list_items = parent.find_elements(By.CSS_SELECTOR, '[class*="List_item"], li')
                        
                        for item in list_items:
                            text = item.text.strip()
                            if text and len(text) > 5 and '—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏' not in text.lower():
                                specializations.append(text)
                        
                        if specializations:
                            break
                except:
                    pass
            
            # –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
            if not specializations:
                modal_text = modal.text
                lines = modal_text.split('\n')
                in_spec_section = False
                
                for line in lines:
                    line = line.strip()
                    
                    if '—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏' in line.lower():
                        in_spec_section = True
                        continue
                    
                    if in_spec_section and any(x in line.lower() for x in ['—Å—Ç–∞—Ç—É—Å', '–∞–¥—Ä–µ—Å', '–∏–Ω–Ω']):
                        break
                    
                    if in_spec_section and line:
                        medical_keywords = ['–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞', '–ª–µ—á–µ–Ω–∏–µ', '—Ç–µ—Ä–∞–ø–∏—è', '–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ', 
                                          '–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è', '–º–∞—Å—Å–∞–∂', '—É–∑–∏', '—Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è']
                        
                        if len(line) > 10 and any(kw in line.lower() for kw in medical_keywords):
                            clean_line = re.sub(r'^\d+\s*', '', line).strip()
                            if clean_line:
                                specializations.append(clean_line)
            
        except Exception as e:
            print(f"    –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π: {str(e)[:100]}")
        
        # –û—á–∏—Å—Ç–∫–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        cleaned_specs = []
        seen = set()
        
        for spec in specializations:
            spec = re.sub(r'^\d+\s*', '', spec).strip()
            spec = spec.rstrip(':').strip()
            
            if len(spec) > 5 and spec.lower() not in seen:
                cleaned_specs.append(spec)
                seen.add(spec.lower())
        
        return '; '.join(cleaned_specs) if cleaned_specs else ''
    
    def check_dental(self, modal_text, org_name="", specializations=""):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—é"""
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏–∏
        dental_keywords = [
            '—Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥', '—Å—Ç–æ–º–∞', '–∑—É–±', 'dental', 'dent',
            '–æ—Ä—Ç–æ–¥–æ–Ω—Ç', '–ø–∞—Ä–æ–¥–æ–Ω—Ç', '–∏–º–ø–ª–∞–Ω—Ç', '–ø—Ä–æ—Ç–µ–∑',
            '–∫–∞—Ä–∏–µ—Å', '–ø—É–ª—å–ø–∏—Ç', '–ø–µ—Ä–∏–æ–¥–æ–Ω—Ç', '—ç–Ω–¥–æ–¥–æ–Ω—Ç',
            '—á–µ–ª—é—Å—Ç', '–ø–æ–ª–æ—Å—Ç —Ä—Ç–∞', '–∑—É–±–Ω', '–¥–µ—Å–Ω', '–ø—Ä–∏–∫—É—Å'
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
        if org_name:
            org_lower = org_name.lower()
            if any(kw in org_lower for kw in dental_keywords[:5]):  # –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã
                return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        if specializations:
            spec_lower = specializations.lower()
            if any(kw in spec_lower for kw in dental_keywords):
                return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        if modal_text:
            text_lower = modal_text.lower()
            if any(kw in text_lower for kw in dental_keywords):
                return True
        
        return False
    
    def extract_info(self, modal, modal_text):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞"""
        record = {}
        
        try:
            lines = modal_text.split('\n')
            
            for j in range(len(lines) - 1):
                line = lines[j].strip()
                
                if '–°—Ç–∞—Ç—É—Å' in line and j + 1 < len(lines):
                    record['–°—Ç–∞—Ç—É—Å'] = lines[j + 1].strip()
                elif '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ª–∏—Ü–µ–Ω–∑–∏–∞—Ç–∞' in line and j + 1 < len(lines):
                    record['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ª–∏—Ü–µ–Ω–∑–∏–∞—Ç–∞'] = lines[j + 1].strip()
                elif '–ò–ù–ù –ª–∏—Ü–µ–Ω–∑–∏–∞—Ç–∞' in line and j + 1 < len(lines):
                    record['–ò–ù–ù'] = lines[j + 1].strip()
                elif '–ù–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞' in line and j + 1 < len(lines):
                    record['–ù–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞'] = lines[j + 1].strip()
                elif '–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏' in line and j + 1 < len(lines):
                    record['–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏'] = lines[j + 1].strip()
                elif '–ê–¥—Ä–µ—Å –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏' in line and j + 1 < len(lines):
                    record['–ê–¥—Ä–µ—Å –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏'] = lines[j + 1].strip()
            
        except Exception as e:
            print(f"    –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {str(e)[:50]}")
        
        return record
    
    def open_modal_with_retries(self, row, view_button, max_retries=2):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        
        for retry in range(max_retries):
            try:
                if retry > 0:
                    time.sleep(3)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç—ã
                    try:
                        rows = self.driver.find_elements(By.CSS_SELECTOR, 'tr.Table_row__329lz, tr[class*="Table_row"]')
                        for r in rows:
                            if row.text[:30] in r.text:
                                row = r
                                cells = row.find_elements(By.TAG_NAME, 'td')
                                if cells:
                                    try:
                                        view_button = cells[-1].find_element(By.CSS_SELECTOR, 'svg, button, a')
                                    except:
                                        view_button = row
                                break
                    except:
                        pass
                
                # –°–∫—Ä–æ–ª–ª–∏–º –∫ —ç–ª–µ–º–µ–Ω—Ç—É
                self.driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", view_button)
                time.sleep(1)
                
                # –ü—Ä–æ–±—É–µ–º –∫–ª–∏–∫–Ω—É—Ç—å
                try:
                    view_button.click()
                except:
                    try:
                        self.driver.execute_script("arguments[0].click();", view_button)
                    except:
                        try:
                            row.click()
                        except:
                            self.driver.execute_script("arguments[0].click();", row)
                
                # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
                start_wait = time.time()
                modal = None
                
                while time.time() - start_wait < 120:
                    try:
                        modals = self.driver.find_elements(By.CSS_SELECTOR, '[class*="Details"], [class*="modal"], [role="dialog"]')
                        for m in modals:
                            if m.is_displayed():
                                modal = m
                                break
                        
                        if modal:
                            time.sleep(2)
                            if modal.is_displayed() and len(modal.text) > 100:
                                return modal
                            
                    except:
                        pass
                    
                    elapsed = int(time.time() - start_wait)
                    if elapsed > 0 and elapsed % 10 == 0:
                        print(f"     ...–∂–¥–µ–º {elapsed} —Å–µ–∫...")
                        
                    time.sleep(1)
                    
            except Exception as e:
                print(f"   –ü–æ–ø—ã—Ç–∫–∞ {retry + 1} –Ω–µ —É–¥–∞–ª–∞—Å—å: {str(e)[:100]}")
        
        # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        print("   –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É...")
        try:
            self.driver.refresh()
            time.sleep(5)
            
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
            time.sleep(5)
            
            # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É –∑–∞–Ω–æ–≤–æ –∏ –ø—Ä–æ–±—É–µ–º –æ—Ç–∫—Ä—ã—Ç—å
            rows = self.driver.find_elements(By.CSS_SELECTOR, 'tr.Table_row__329lz, tr[class*="Table_row"]')
            original_text = row.text[:50]
            
            for r in rows:
                if original_text in r.text:
                    try:
                        cells = r.find_elements(By.TAG_NAME, 'td')
                        if cells:
                            view_button = cells[-1].find_element(By.CSS_SELECTOR, 'svg, button, a')
                        else:
                            view_button = r
                        
                        self.driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", view_button)
                        time.sleep(1)
                        
                        try:
                            view_button.click()
                        except:
                            self.driver.execute_script("arguments[0].click();", view_button)
                        
                        # –ñ–¥–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                        time.sleep(3)
                        modals = self.driver.find_elements(By.CSS_SELECTOR, '[class*="Details"], [class*="modal"], [role="dialog"]')
                        for m in modals:
                            if m.is_displayed() and len(m.text) > 100:
                                return m
                    except:
                        pass
                    break
            
        except:
            pass
        
        return None
    
    def go_to_next_page(self, target_page):
        """–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É"""
        try:
            print(f"  –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É {target_page}...")
            
            self.close_modal_window()
            time.sleep(1)
            
            # –ü–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            pagination_selectors = [
                f'//button[text()="{target_page}"]',
                f'//a[text()="{target_page}"]',
                f'[aria-label="{target_page}"]',
                '[aria-label="next"]',
                '.pagination-next',
                '[class*="pagination"] button:last-child'
            ]
            
            next_button = None
            
            for selector in pagination_selectors:
                try:
                    if selector.startswith('//'):
                        next_button = self.driver.find_element(By.XPATH, selector)
                    else:
                        next_button = self.driver.find_element(By.CSS_SELECTOR, selector)
                    
                    if next_button.is_enabled() and next_button.is_displayed():
                        break
                    else:
                        next_button = None
                except:
                    continue
            
            # –ü–æ–∏—Å–∫ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            if not next_button:
                try:
                    pagination_containers = self.driver.find_elements(By.CSS_SELECTOR, '[class*="pagination"], [class*="Pagination"]')
                    
                    for container in pagination_containers:
                        buttons = container.find_elements(By.CSS_SELECTOR, 'button, a')
                        
                        for button in buttons:
                            button_text = button.text.strip()
                            
                            if button_text == str(target_page) and button.is_enabled():
                                next_button = button
                                break
                        
                        if next_button:
                            break
                except:
                    pass
            
            if next_button:
                self.driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", next_button)
                time.sleep(1)
                
                try:
                    next_button.click()
                except:
                    self.driver.execute_script("arguments[0].click();", next_button)
                
                time.sleep(5)
                return True
                
        except Exception as e:
            print(f"  –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞: {str(e)[:100]}")
        
        return False
    
    def parse_data(self, start_page=1):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö"""
        
        page_num = start_page
        
        try:
            while True:
                print(f"\n{'='*50}")
                print(f"–°–¢–†–ê–ù–ò–¶–ê {page_num}")
                print(f"{'='*50}")
                
                # –ñ–¥–µ–º —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ö–æ–¥–∞
                time.sleep(2)
                
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
                rows = self.driver.find_elements(By.CSS_SELECTOR, 'tr.Table_row__329lz, tr[class*="Table_row"]')
                if not rows:
                    rows = self.driver.find_elements(By.CSS_SELECTOR, 'tbody tr')
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏
                data_rows = []
                for row in rows:
                    text = row.text
                    if text and ('–ú–µ–¥–∏—Ü–∏–Ω–∞' in text or '–õ–∏—Ü–µ–Ω–∑–∏—è' in text):
                        data_rows.append(row)
                
                print(f"–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {len(data_rows)}")
                
                page_dental_count = 0
                page_duplicates = 0
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É
                for i, row in enumerate(data_rows):
                    try:
                        print(f"\n–ó–∞–ø–∏—Å—å {i+1}/{len(data_rows)}:")
                        self.processed_count += 1
                        
                        row_text = row.text
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                        org_name_preview = ""
                        inn_preview = ""
                        lines = row_text.split('\n')
                        if len(lines) >= 4:
                            inn_preview = lines[2]  # –ò–ù–ù –æ–±—ã—á–Ω–æ –Ω–∞ 3-–π —Å—Ç—Ä–æ–∫–µ
                            org_name_preview = lines[3]  # –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ 4-–π
                        
                        print(f"  –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {org_name_preview[:50]}...")
                        
                        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
                        self.close_modal_window()
                        time.sleep(0.5)
                        
                        # –ù–∞—Ö–æ–¥–∏–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
                        view_button = None
                        try:
                            cells = row.find_elements(By.TAG_NAME, 'td')
                            if cells:
                                last_cell = cells[-1]
                                view_button = last_cell.find_element(By.CSS_SELECTOR, 'svg, button, a')
                        except:
                            view_button = row
                        
                        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                        modal = self.open_modal_with_retries(row, view_button)
                        
                        if not modal:
                            print("  ‚ö† –ü—Ä–æ–ø—É—Å–∫–∞–µ–º - –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å")
                            self.skipped_count += 1
                            continue
                        
                        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                        try:
                            self.driver.execute_script("arguments[0].scrollTop = arguments[0].scrollHeight", modal)
                            time.sleep(2)
                        except:
                            pass
                        
                        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
                        modal_text = modal.text
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                        record = self.extract_info(modal, modal_text)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ
                        status = record.get('–°—Ç–∞—Ç—É—Å', '').lower()
                        if '–∞–∫—Ç–∏–≤–Ω' not in status:
                            print(f"  ‚ö† –°—Ç–∞—Ç—É—Å –Ω–µ –∞–∫—Ç–∏–≤–Ω—ã–π: {record.get('–°—Ç–∞—Ç—É—Å', '')}")
                            self.close_modal_window()
                            continue
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                        specializations = self.extract_specializations(modal)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—é
                        if self.check_dental(modal_text, org_name_preview, specializations):
                            print(f"  ‚úì –°–¢–û–ú–ê–¢–û–õ–û–ì–ò–Ø –Ω–∞–π–¥–µ–Ω–∞!")
                            
                            record['–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏'] = specializations if specializations else '–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è'
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Google Sheets (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)
                            if self.add_to_google_sheets(record):
                                page_dental_count += 1
                            else:
                                page_duplicates += 1
                        else:
                            print("  ‚ùå –ù–ï —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è")
                        
                        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                        self.close_modal_window()
                        
                    except KeyboardInterrupt:
                        raise
                        
                    except Exception as e:
                        print(f"  ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)[:100]}")
                        self.skipped_count += 1
                        self.close_modal_window()
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                self.save_last_processed_page(page_num)
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                print(f"\n{'='*50}")
                print(f"üìä –ò–¢–û–ì–ò –°–¢–†–ê–ù–ò–¶–´ {page_num}:")
                print(f"  ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(data_rows)}")
                print(f"  ‚Ä¢ –ù–æ–≤—ã—Ö —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö: {page_dental_count}")
                print(f"  ‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {page_duplicates}")
                print(f"  ‚Ä¢ –í—Å–µ–≥–æ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ: {self.dental_count}")
                print(f"{'='*50}")
                
                # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                print(f"\n‚û°Ô∏è –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É {page_num + 1}...")
                if self.go_to_next_page(page_num + 1):
                    page_num += 1
                    time.sleep(3)
                else:
                    print("‚ùå –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ - –∑–∞–≤–µ—Ä—à–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥")
                    break
                    
        except KeyboardInterrupt:
            print("\n\n‚ö†Ô∏è –ü–ê–†–°–ò–ù–ì –û–°–¢–ê–ù–û–í–õ–ï–ù –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ú")
            print(f"–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {page_num}")
            self.save_last_processed_page(page_num)
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.print_final_stats()
    
    def print_final_stats(self):
        """–í—ã–≤–æ–¥ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        print("\n" + "="*60)
        print("–ü–ê–†–°–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù!")
        print("="*60)
        print(f"–í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {self.processed_count}")
        print(f"–ù–∞–π–¥–µ–Ω–æ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö: {self.dental_count}")
        print(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {self.duplicates_count}")
        print(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏: {self.skipped_count}")
        
        if self.processed_count > 0:
            print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö: {self.dental_count/self.processed_count*100:.1f}%")
            success_rate = (self.processed_count - self.skipped_count) / self.processed_count * 100
            print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: {success_rate:.1f}%")
        
        print("="*60)
        print(f"\n–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Google Sheets:")
        print(f"https://docs.google.com/spreadsheets/d/{self.google_sheet_id}")
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞ - –í–°–ï–ì–î–ê –° 1 –°–¢–†–ê–ù–ò–¶–´, –¢–û–õ–¨–ö–û 2 –°–¢–†–ê–ù–ò–¶–´"""
        print("\n" + "="*60)
        print("ü§ñ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ü–ê–†–°–ï–† (–ü–ï–†–í–´–ï 2 –°–¢–†–ê–ù–ò–¶–´)")
        print("–°–¢–û–ú–ê–¢–û–õ–û–ì–ò–ß–ï–°–ö–ò–• –õ–ò–¶–ï–ù–ó–ò–ô –£–ó–ë–ï–ö–ò–°–¢–ê–ù–ê")
        print("="*60)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Sheets
        try:
            self.setup_google_sheets()
        except Exception as e:
            print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
            print("\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
            print("1. –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø—É—Ç–∏ –∫ JSON —Ñ–∞–π–ª—É")
            print("2. –î–æ—Å—Ç—É–ø —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ")
            print("3. ID —Ç–∞–±–ª–∏—Ü—ã Google Sheets")
            return
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞
        self.setup_driver()
        
        # –í–°–ï–ì–î–ê –Ω–∞—á–∏–Ω–∞–µ–º —Å 1 —Å—Ç—Ä–∞–Ω–∏—Ü—ã!
        start_page = 1
        
        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"  ‚Ä¢ –ó–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ: {len(self.existing_records)}")
        print(f"  ‚Ä¢ –í–°–ï–ì–î–ê –Ω–∞—á–∏–Ω–∞–µ–º —Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã: 1")
        print(f"  ‚Ä¢ –ë—É–¥–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: 1 –∏ 2")
        
        # –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å–∞–π—Ç —Å –ü–†–ê–í–ò–õ–¨–ù–´–ú URL —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏!
        print("\nüåê –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–∞–π—Ç —Å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏...")
        print(f"   URL: https://license.gov.uz/registry?filter...")
        
        # –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ü–†–ê–í–ò–õ–¨–ù–´–ô URL —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏!
        self.driver.get("https://license.gov.uz/registry?filter%5Bdocument_id%5D=2908&filter%5Bdocument_type%5D=LICENSE")
        
        print("\n‚è≥ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞...")
        print("   ‚Ä¢ –í—ã–±–æ—Ä —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞")
        print("   ‚Ä¢ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
        print("   ‚Ä¢ –§–∏–ª—å—Ç—Ä—ã –£–ñ–ï –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –≤ URL:")
        print("     - –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞: –õ–∏—Ü–µ–Ω–∑–∏—è")
        print("     - –£—Å–ª—É–≥–∞: –õ–∏—Ü–µ–Ω–∑–∏—è –Ω–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫—É—é –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å (ID: 2908)")
        
        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –≤—ã–±–∏—Ä–∞–µ–º —è–∑—ã–∫
        if not self.wait_for_table_and_select_language():
            print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫")
            print("–ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä–æ–µ—Ç—Å—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
            time.sleep(5)
            self.driver.quit()
            return
        
        print("\n‚úÖ –í–°–ï –ì–û–¢–û–í–û –ö –ü–ê–†–°–ò–ù–ì–£!")
        print("üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–µ—Ä–≤—ã—Ö 2 —Å—Ç—Ä–∞–Ω–∏—Ü...")
        print("\n‚ö†Ô∏è –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ: Ctrl+C")
        print("="*60)
        
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º
        time.sleep(3)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –¢–û–õ–¨–ö–û 2 –°–¢–†–ê–ù–ò–¶
        self.parse_data_limited(start_page=1, max_pages=2)
        
        print("\nüèÅ –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print("–ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä–æ–µ—Ç—Å—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
        time.sleep(5)
        self.driver.quit()
    
    def wait_for_table_and_select_language(self):
        """–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –≤—ã–±–æ—Ä —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞"""
        print("–û–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
        
        # –ñ–¥–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
        time.sleep(5)
        
        # –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –≤—ã–±–∏—Ä–∞–µ–º —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
        language_selected = self.select_russian_language()
        
        if not language_selected:
            print("‚ö† –í–ù–ò–ú–ê–ù–ò–ï: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫")
            print("  –ü—Ä–æ–±—É–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –Ω–æ –Ω–∞–∑–≤–∞–Ω–∏—è –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º")
        
        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –ø–æ—Å–ª–µ —Å–º–µ–Ω—ã —è–∑—ã–∫–∞
        max_wait = 120
        start_time = time.time()
        
        while time.time() - start_time < max_wait:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü—ã
                rows = self.driver.find_elements(By.CSS_SELECTOR, 'tr.Table_row__329lz, tr[class*="Table_row"]')
                if not rows:
                    rows = self.driver.find_elements(By.CSS_SELECTOR, 'tbody tr')
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏
                data_rows = [row for row in rows if row.text and len(row.text) > 20]
                
                if len(data_rows) > 0:
                    print(f"‚úì –¢–∞–±–ª–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –Ω–∞–π–¥–µ–Ω–æ {len(data_rows)} –∑–∞–ø–∏—Å–µ–π")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–∑—ã–∫ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
                    if data_rows[0].text:
                        sample_text = data_rows[0].text[:200]
                        if any(eng in sample_text for eng in ['FARM', 'MEDICAL', 'CENTER', 'COMPANY']):
                            print("‚ö† –í–ù–ò–ú–ê–ù–ò–ï: –î–∞–Ω–Ω—ã–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º/—É–∑–±–µ–∫—Å–∫–æ–º —è–∑—ã–∫–µ!")
                            print("  –ü—ã—Ç–∞–µ–º—Å—è –µ—â–µ —Ä–∞–∑ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —è–∑—ã–∫...")
                            self.select_russian_language()
                            time.sleep(3)
                    
                    return True
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                elapsed = int(time.time() - start_time)
                if elapsed % 10 == 0 and elapsed > 0:
                    print(f"  –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏... {elapsed} —Å–µ–∫")
                
                time.sleep(2)
                
            except Exception as e:
                print(f"  –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏: {str(e)[:50]}")
                time.sleep(2)
        
        print("‚ö† –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã")
        return False
    
    def parse_data_limited(self, start_page=1, max_pages=2):
        """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö - –¢–û–õ–¨–ö–û –£–ö–ê–ó–ê–ù–ù–û–ï –ö–û–õ–ò–ß–ï–°–¢–í–û –°–¢–†–ê–ù–ò–¶"""
        
        page_num = start_page
        pages_processed = 0
        
        try:
            while pages_processed < max_pages:
                print(f"\n{'='*50}")
                print(f"–°–¢–†–ê–ù–ò–¶–ê {page_num} (–∏–∑ {max_pages} —Å—Ç—Ä–∞–Ω–∏—Ü)")
                print(f"{'='*50}")
                
                # –ñ–¥–µ–º —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ö–æ–¥–∞
                time.sleep(2)
                
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
                rows = self.driver.find_elements(By.CSS_SELECTOR, 'tr.Table_row__329lz, tr[class*="Table_row"]')
                if not rows:
                    rows = self.driver.find_elements(By.CSS_SELECTOR, 'tbody tr')
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏
                data_rows = []
                for row in rows:
                    text = row.text
                    if text and len(text) > 20:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–ª—è –≤–∞–ª–∏–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
                        data_rows.append(row)
                
                print(f"–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {len(data_rows)}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–∑—ã–∫ –¥–∞–Ω–Ω—ã—Ö
                if data_rows and page_num == 1:
                    sample_text = data_rows[0].text
                    if any(eng in sample_text for eng in ['FARM', 'MEDICAL', 'CENTER']):
                        print("\n‚ö† –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ!")
                        print("  –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö:", sample_text[:100])
                        print("\n  –û–°–¢–ê–ù–û–í–ö–ê –ü–ê–†–°–ò–ù–ì–ê!")
                        print("  –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø–∞—Ä—Å–µ—Ä, –æ–Ω –ø–æ–ø—Ä–æ–±—É–µ—Ç –µ—â–µ —Ä–∞–∑ –≤—ã–±—Ä–∞—Ç—å —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫")
                        return
                
                page_dental_count = 0
                page_duplicates = 0
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É
                for i, row in enumerate(data_rows):
                    try:
                        print(f"\n–ó–∞–ø–∏—Å—å {i+1}/{len(data_rows)}:")
                        self.processed_count += 1
                        
                        row_text = row.text
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                        org_name_preview = ""
                        inn_preview = ""
                        lines = row_text.split('\n')
                        if len(lines) >= 4:
                            inn_preview = lines[2]  # –ò–ù–ù –æ–±—ã—á–Ω–æ –Ω–∞ 3-–π —Å—Ç—Ä–æ–∫–µ
                            org_name_preview = lines[3]  # –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ 4-–π
                        
                        print(f"  –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {org_name_preview[:50]}...")
                        
                        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
                        self.close_modal_window()
                        time.sleep(0.5)
                        
                        # –ù–∞—Ö–æ–¥–∏–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
                        view_button = None
                        try:
                            cells = row.find_elements(By.TAG_NAME, 'td')
                            if cells:
                                last_cell = cells[-1]
                                view_button = last_cell.find_element(By.CSS_SELECTOR, 'svg, button, a')
                        except:
                            view_button = row
                        
                        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                        modal = self.open_modal_with_retries(row, view_button)
                        
                        if not modal:
                            print("  ‚ö† –ü—Ä–æ–ø—É—Å–∫–∞–µ–º - –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å")
                            self.skipped_count += 1
                            continue
                        
                        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                        try:
                            self.driver.execute_script("arguments[0].scrollTop = arguments[0].scrollHeight", modal)
                            time.sleep(2)
                        except:
                            pass
                        
                        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
                        modal_text = modal.text
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                        record = self.extract_info(modal, modal_text)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ
                        status = record.get('–°—Ç–∞—Ç—É—Å', '').lower()
                        if '–∞–∫—Ç–∏–≤–Ω' not in status and 'faol' not in status:  # Faol = –∞–∫—Ç–∏–≤–Ω—ã–π –Ω–∞ —É–∑–±–µ–∫—Å–∫–æ–º
                            print(f"  ‚ö† –°—Ç–∞—Ç—É—Å –Ω–µ –∞–∫—Ç–∏–≤–Ω—ã–π: {record.get('–°—Ç–∞—Ç—É—Å', '')}")
                            self.close_modal_window()
                            continue
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                        specializations = self.extract_specializations(modal)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—é
                        if self.check_dental(modal_text, org_name_preview, specializations):
                            print(f"  ‚úì –°–¢–û–ú–ê–¢–û–õ–û–ì–ò–Ø –Ω–∞–π–¥–µ–Ω–∞!")
                            
                            record['–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏'] = specializations if specializations else '–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è'
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Google Sheets (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)
                            if self.add_to_google_sheets(record):
                                page_dental_count += 1
                            else:
                                page_duplicates += 1
                        else:
                            print("  ‚ùå –ù–ï —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è")
                        
                        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                        self.close_modal_window()
                        
                    except KeyboardInterrupt:
                        raise
                        
                    except Exception as e:
                        print(f"  ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)[:100]}")
                        self.skipped_count += 1
                        self.close_modal_window()
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                print(f"\n{'='*50}")
                print(f"üìä –ò–¢–û–ì–ò –°–¢–†–ê–ù–ò–¶–´ {page_num}:")
                print(f"  ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(data_rows)}")
                print(f"  ‚Ä¢ –ù–æ–≤—ã—Ö —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö: {page_dental_count}")
                print(f"  ‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {page_duplicates}")
                print(f"  ‚Ä¢ –í—Å–µ–≥–æ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ: {self.dental_count}")
                print(f"{'='*50}")
                
                pages_processed += 1
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                if pages_processed < max_pages:
                    print(f"\n‚û°Ô∏è –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É {page_num + 1}...")
                    if self.go_to_next_page(page_num + 1):
                        page_num += 1
                        time.sleep(3)
                    else:
                        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É")
                        break
                else:
                    print(f"\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {max_pages} —Å—Ç—Ä–∞–Ω–∏—Ü - –∑–∞–≤–µ—Ä—à–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥")
                    break
                    
        except KeyboardInterrupt:
            print("\n\n‚ö†Ô∏è –ü–ê–†–°–ò–ù–ì –û–°–¢–ê–ù–û–í–õ–ï–ù –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ú")
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.print_final_stats()

if __name__ == "__main__":
    parser = GoogleSheetsParser()
    try:
        parser.run()
    except KeyboardInterrupt:
        print("\n\n–ü–†–û–ì–†–ê–ú–ú–ê –û–°–¢–ê–ù–û–í–õ–ï–ù–ê")
    except Exception as e:
        print(f"\n\n–û–®–ò–ë–ö–ê: {str(e)}")
        print("–ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä–æ–µ—Ç—Å—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
        time.sleep(5)